local function bind(op, outer_opts)
	outer_opts = outer_opts or { noremap = true }
	return function(lhs, rhs, opts)
		opts = vim.tbl_extend("force", outer_opts, opts or {})
		vim.keymap.set(op, lhs, rhs, opts)
	end
end

-- local nmap = bind("n", {noremap = false})
-- local xnoremap = bind("x")
local nnoremap = bind("n")
local vnoremap = bind("v")
local inoremap = bind("i")
local tnoremap = bind("t")

--LSP
nnoremap("gd", function()
	vim.lsp.buf.definition()
end)
nnoremap("gf", function()
	vim.lsp.buf.format()
end)
nnoremap("gi", function()
	vim.lsp.buf.implementation()
end)
nnoremap("gt", function()
	vim.lsp.buf.type_definition()
end)
nnoremap("ga", function()
	vim.lsp.buf.code_action()
end)
nnoremap("K", function()
	vim.lsp.buf.hover()
end)
nnoremap("gr", function()
	require("lspsaga.rename").rename()
end)
nnoremap("gD", function()
	require("lspsaga.provider").lsp_finder()
end)
nnoremap("gj", function()
	vim.diagnostic.goto_next()
end)
nnoremap("gk", function()
	vim.diagnostic.goto_prev()
end)
nnoremap("ge", function()
	require("lspsaga.diagnostic").show_line_diagnostics()
end)
inoremap("<C-h>", function()
	vim.lsp.buf.signature_help()
end)

--misc
inoremap("jj", "<Esc>")
inoremap("jk", "<Esc>")
inoremap("<S-Tab>", "<Esc>Ea")
inoremap("<S-CR>", "<Esc>o")

nnoremap("å", function()
	require("nvim-tree").toggle()
end)
nnoremap("Å", ":AerialToggle<CR>")

nnoremap("L", "$")
nnoremap("H", "0")
vnoremap("L", "$")
vnoremap("H", "0")

nnoremap("<S-q>", function()
	require("bufdelete").bufdelete(0, true)
end)
nnoremap("<Tab>", ":bnext<CR>")
nnoremap("<S-Tab>", ":bprev<CR>")

nnoremap("<leader>ww", ":vsplit<CR>")
nnoremap("<leader>ws", ":split<CR>")
nnoremap("<leader>wq", ":q<CR>")
nnoremap("<leader>h", "<C-w>h")
nnoremap("<leader>j", "<C-w>j")
nnoremap("<leader>k", "<C-w>k")
nnoremap("<leader>l", "<C-w>l")

tnoremap("<Esc>", "<C-\\><C-n>")

--Telescope
nnoremap("<leader>fs", function()
	require("telescope.builtin").grep_string()
end)
nnoremap("<leader>ff", function()
	require("telescope.builtin").find_files()
end)

nnoremap("<leader>fl", function()
	require("telescope.builtin").live_grep()
end)

nnoremap("<leader>fw", function()
	require("telescope.builtin").current_buffer_fuzzy_find()
end)

nnoremap("<leader>fF", function()
	require("telescope").extensions.file_browser.file_browser()
end)
